<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dmitri Pisarev</title>
    <description>Reflections on modern web development techniques.</description>
    <link>http://dimaip.tumblr.com/</link>
    <atom:link href="http://dimaip.tumblr.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 18 Apr 2015 02:43:09 +0300</pubDate>
    <lastBuildDate>Sat, 18 Apr 2015 02:43:09 +0300</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Caching in Neos: examples and gothchas</title>
        <description>&lt;p&gt;This week I finally learned how caching mechanisms work in &lt;a href=&quot;http://neos.typo3.org&quot;&gt;Neos&lt;/a&gt;. Time to share!&lt;/p&gt;

&lt;h2 id=&quot;basic-concepts&quot;&gt;Basic concepts&lt;/h2&gt;

&lt;p&gt;A quick summary of what we know from the &lt;a href=&quot;http://docs.typo3.org/neos/TYPO3NeosDocumentation/IntegratorGuide/ContentCache.html&quot;&gt;official documentation&lt;/a&gt;.
- Each TypoSript path may have its own caching configuration of type &lt;code&gt;cached&lt;/code&gt;, &lt;code&gt;embed&lt;/code&gt; and &lt;code&gt;uncached&lt;/code&gt;. By default all paths are ‘embedded’ into their paraent’s cache entry.
- For configuration of type &lt;code&gt;cached&lt;/code&gt; there are two things you need to configure: what defines a unique cache entry (&lt;code&gt;entryIdentifier&lt;/code&gt;) and in what circumstances it should be flushed (&lt;code&gt;entryTags&lt;/code&gt;).
- For configuration of type &lt;code&gt;uncached&lt;/code&gt; you must not forget to fill the &lt;code&gt;context&lt;/code&gt; configuration with all of the context variables needed for rendering given path (like &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;documentNode&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;some-examples&quot;&gt;Some examples&lt;/h2&gt;

&lt;p&gt;So in most cases you don’t need to touch the cache configuration at all. Usually you would define new cache entries for the sake of flushing the cache for content that is comming from other pages, so the &lt;code&gt;entryTags&lt;/code&gt; configuration would be closely related to the FlowQuery you use to pull in your content. There are three main options you have for configuring entry Tags: &lt;code&gt;NodeType_[My.Package:NodeTypeName]&lt;/code&gt;, &lt;code&gt;Node_[Identifier]&lt;/code&gt; and &lt;code&gt;DescendantOf_[Identifier]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are a few examples from our in-house news package:&lt;/p&gt;

&lt;h3 id=&quot;flush-the-cache-when-a-child-of-a-certain-node-changes&quot;&gt;Flush the cache when a child of a certain node changes&lt;/h3&gt;

&lt;p&gt;With this FlowQuery I pull in news from a certain, dynamically configured node: &lt;code&gt;collection = ${q(rootNode).children('[instanceof Sfi.News:Listable]').get()}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And here’s the corresponding entryTag: &lt;code&gt;${'DescendantOf_' + rootNode.identifier}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;flush-the-cache-when-a-node-of-a-certain-type-changes&quot;&gt;Flush the cache when a node of a certain type changes&lt;/h3&gt;

&lt;p&gt;With this FlowQuery we pull-in only inportant news of a special type to the carousel on the main page: &lt;code&gt;collection = ${q(site).find('[instanceof Sfi.News:ImportantMixin]').filter('[important = TRUE]').get()}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And here’s the corresponding entryTag: &lt;code&gt;${'NodeType_Sfi.News:ImportantMixin'}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So far things look really easy, but wait, there are a few nuances that would make you scratch your head.&lt;/p&gt;

&lt;h2 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h2&gt;

&lt;h3 id=&quot;contentcollection-inside-of-content&quot;&gt;ContentCollection inside of Content&lt;/h3&gt;

&lt;p&gt;Neos has this little piece of configuration that caused me a lot of trouble:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;prototype&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TYPO3.Neos:Content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	prototype&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TYPO3.Neos:ContentCollection&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# Make ContentCollection inside content node types embedded by default.&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# Usually there&amp;#39;s no need for a separate cache entry for container content elements, but depending on the use-case&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# the mode can safely be switched to &amp;#39;cached&amp;#39;.&lt;/span&gt;
		@cache &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;embed&amp;#39;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most people render their root content collection from their page object (or any object inheriting from TYPO3.Neos:Document), but not me. I always have some proxy object, inheriting from TYPO3.Neos:Content, inside of which I render the root content collection. The result? – ContentCollections get embeded into the page object, so if I change some element inside of that ContentCollection and refresh the page, the changes are gone. Here’s how to fix it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;prototype&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TYPO3.Neos:Content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.prototype&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TYPO3.Neos:ContentCollection&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.@cache.mode &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cached&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;pagination&quot;&gt;Pagination&lt;/h3&gt;

&lt;p&gt;When using the typo3cr pagination widget, the state of the page is defined not only by the TypoScript path, but also by the pagination argument in request, so the &lt;code&gt;entryIdentifier&lt;/code&gt; must include: &lt;code&gt;pagination = ${request.pluginArguments.YOUR_PAGINATION_WIDGET_ID.currentPage}&lt;/code&gt;. Actually this is one of the rare cases where you need to add something non-standard to &lt;code&gt;entryIdentifier&lt;/code&gt;. However, guess what, this config wouldn’t work! The reason is given in the small note in the documentation, and it’s easy to miss:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the cache hierarchy the outermost cache entry determines all the nested entries, so it’s important to add values that influence the rendering for every cached path along the hierarchy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we know how to make it work, add the same config to all parent cache definitions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;page.path.to.your.objct.@cache.entryIdentifier.pagination &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.pluginArguments.YOUR_PAGINATION_WIDGET_ID.currentPage&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
page.@cache.entryIdentifier.pagination &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.pluginArguments.YOUR_PAGINATION_WIDGET_ID.currentPage&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
root.@cache.entryIdentifier.pagination &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.pluginArguments.YOUR_PAGINATION_WIDGET_ID.currentPage&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the rule is, &lt;em&gt;if you add something non-standard to an entryIdentifier, you must also include it in all parent cache defintions&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;more-cool-stuff-coming&quot;&gt;More cool stuff coming&lt;/h2&gt;

&lt;p&gt;In the Neos 2.0 release there’ll be a &lt;a href=&quot;https://review.typo3.org/#/c/36210/&quot;&gt;very useful addition called GlobalCacheIdentifiers&lt;/a&gt;. Basically it stores all global things which influnce the rendering of a node, acting as default value for a nodeIdentifier: by default &lt;code&gt;format&lt;/code&gt; and &lt;code&gt;baseUri&lt;/code&gt;, but you can add more things there. So in Neos 2.0 we would no longer need to specify &lt;code&gt;entryIdentifier&lt;/code&gt; in most of the cases.&lt;/p&gt;

&lt;p&gt;More additions are comming in the future, like &lt;a href=&quot;https://review.typo3.org/#/c/36239/&quot;&gt;runtime cached segments&lt;/a&gt;, but even what we have now if pretty awesome.&lt;/p&gt;

&lt;p&gt;I hope this post has helped you to quickly get up to speed with caching concepts in Neos. If not, write a caching-related question in the comments and I’ll try to help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Big thanks to Aske Ertmann and Christian Müller for help in understanding all this stuff and to Florian Weiss for proofreading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://dimaip.tumblr.com/2015/04/18/caching-typoscript/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2015/04/18/caching-typoscript/</guid>
        
        <category>neos</category>
        
        <category>typoscript</category>
        
        <category>caching</category>
        
        
      </item>
    
      <item>
        <title>Hybrid deploy with Docker and Surf</title>
        <description>&lt;p&gt;In the &lt;a href=&quot;http://dimaip.github.io/2014/12/20/three-steps-to-deploy/&quot;&gt;previous article&lt;/a&gt; I’ve written about three essential steps to modern deployment: code hosting with git and Github + contineous integration with CircleCI and Composer + contineous deployment with Surf.&lt;/p&gt;

&lt;p&gt;I was quite happy with the results, but I knew I’d have one more problem to tackle…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt;: modern projects require up-to-date server setup to perform well: fast-cgi PHP or even HHVM, tuned Nginx instance, Redis cache backend and so on. But in our case we have a hundred legacy projects lingering around our server which would be a hell to upgrade to use this latest software.&lt;/p&gt;

&lt;p&gt;Who shall be our saviour from this dependency hell of old infrastructure? – The buzzword of the day, 22 month old baby named Docker.&lt;/p&gt;

&lt;p&gt;In this tutorial we will learn how to do simple multi-website hosting on one server, where each site will be running in an isolated container, and code deployments will be performed via Surf. Let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;master-the-power-of-docker&quot;&gt;1. Master the power of Docker&lt;/h3&gt;

&lt;p&gt;Read something about Docker, &lt;a href=&quot;https://docs.docker.com/&quot;&gt;docs&lt;/a&gt; is the good place to get started. Two main concepts to grasp: image and container.&lt;/p&gt;

&lt;p&gt;Each Docker image is defined by Dockerfile. In this file you define a base image and things you’ll do on top of it: you can run commands, add files to image and so on.&lt;/p&gt;

&lt;p&gt;A solid example of Neos CMS Docker image is an &lt;a href=&quot;https://github.com/million12/docker-typo3-neos&quot;&gt;image created by Million12 guys&lt;/a&gt;, not only is it full of cool features, but you can also learn a lot about Docker best practices from it.&lt;/p&gt;

&lt;p&gt;Once you have written your Dockerfile, you need to build it: cd to the Dockerfile location and run &lt;code&gt;docker build -t 'me/my-project'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the image is built, you can spin up a container from it with &lt;code&gt;docker run -d -p 80:80 -t me/my-project&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All the services your project requires like mysql or Redis should be run in separate containers, and started before your main app container. It’s called a single responsibility principle – each container should only run one service.&lt;/p&gt;

&lt;h3 id=&quot;describe-project-environment-with-docker-compose&quot;&gt;2. Describe project environment with docker-compose&lt;/h3&gt;

&lt;p&gt;Spining all containers from command line and linking them together by hand is very boring and error prone, that’s why I began using tool called &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose&lt;/a&gt; right from the start (originally called fig).&lt;/p&gt;

&lt;p&gt;It allows you to describe  in a single file (&lt;code&gt;docker-compose.yml&lt;/code&gt;) all of your containers needed for the project to work, and then run them all together with one command (&lt;code&gt;docker-compose up -d&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;things-get-cloudy----deploying-docker-containers-from-docker-hub&quot;&gt;3. Things get cloudy – Deploying docker containers from Docker Hub&lt;/h3&gt;

&lt;p&gt;Docker provides a very cool service for hosting your images in the cloud – &lt;a href=&quot;hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It links to your code repository, where your Dockerfile is stored, and &lt;a href=&quot;http://docs.docker.com/docker-hub/builds/&quot;&gt;automatically builds&lt;/a&gt; your project image after each code change.&lt;/p&gt;

&lt;p&gt;This way the only thing you need to start up the project is your &lt;code&gt;docker-compose.yml&lt;/code&gt; – copy it to new server, spin it up and Docker would automatically pull the latest image from the cloud on first start. It’s a kind of magic.&lt;/p&gt;

&lt;h3 id=&quot;hybrid-deployment-with-surfdocker&quot;&gt;4. Hybrid deployment with Surf+Docker&lt;/h3&gt;

&lt;p&gt;By this moment we already have a pretty neat deployment workflow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Commit the code to repository.&lt;/li&gt;
  &lt;li&gt;Image is automatically rebuilt in Docker Hub.&lt;/li&gt;
  &lt;li&gt;Pull latest changes from Docker Hub and restart containers on server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However convenient it may be, doing full container deploy for every small code change (like a CSS bugfix) sounds a bit of an overkill. Plus we already have a well-defined Surf workflow from a &lt;a href=&quot;dimaip.github.io/2014/12/20/three-steps-to-deploy/&quot;&gt;previous tutorial&lt;/a&gt;, so why not use Surf together with Docker?&lt;/p&gt;

&lt;p&gt;So we would use full Docker container re-deploy for big infrastructure changes (like adding Redis), and Surf for regular code commits.&lt;/p&gt;

&lt;p&gt;For Surf to deploy code to our container, we must provide it with an ssh access. It’s best to use a separate ssh container for that, which we can link with data volumes and databases from our app – remember the single responsibility principle. Not to store your ssh password, we can use Github for authentication. Just provide it with your Github user id, and all hosts that have their keys stored in your Github account would be able to connect to your your Docker image without problem.&lt;/p&gt;

&lt;p&gt;From Docker image we need to prepare directory structure for Surf on initial deployment, and then let Surf do its job. You can have a look at &lt;a href=&quot;https://github.com/dimaip/docker-typo3-flow-neos-abstract&quot;&gt;my modification of M12’s image&lt;/a&gt; specificaly for this purpose.&lt;/p&gt;

&lt;h3 id=&quot;routing&quot;&gt;5. Routing&lt;/h3&gt;

&lt;p&gt;If we plan to run more then one app on the server, we should redirect a traffic based on host name to a particular container. There are many tools that allow you to automate it, but I decided to go with somethings really simple – &lt;a href=&quot;https://github.com/jwilder/docker-gen&quot;&gt;docker-gen&lt;/a&gt;. It reads information from running docker containers and creates any config files you need based on a template.
So let’s put Nginx reverse proxy in front of our containers and let docker-gen &lt;a href=&quot;https://github.com/jwilder/nginx-proxy&quot;&gt;automatically configure Nginx&lt;/a&gt; for domain to internal container port mapping, based on DOMAIN context variable in each container.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;So this is how things work now:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a Dockerfile for your project and store it together with your code in Github.&lt;/li&gt;
  &lt;li&gt;Create an auto-build image for your project on Docker Hub. The image is built automatically and hosted in Docker Hub.&lt;/li&gt;
  &lt;li&gt;Write a &lt;code&gt;docker-compose.yml&lt;/code&gt; file and define all your project dependencies like databases etc. Spin up all required services by typing &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run Nginx as a reverse proxy in front of it. Route traffic based on VIRTUAL_HOST context variable.&lt;/li&gt;
  &lt;li&gt;Point your Surf deployment task (running on integration server like CircleCI or Jenkins) to your ssh container and do code-only deployments with Surf. If you need to re-configure the infrastructure, do full Docker deployment.&lt;/li&gt;
  &lt;li&gt;Setup things like auto container start on system startup, monitoring, regular backups etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;

&lt;p&gt;There still remain a few things we haven’t take care of.
The most important one is that we’ll have about a minute of downtime when redeploying docker containers. If we are going to do mostly Surf deployments, and do container restart ones in a few months, a minute of downtime is probably OK. But still it’s best take care of it. The steps to resolve it would be to start new container while the old one is still running, do a smoke-test on it and then stop and remove the old container. Not hard to do, just needs a bit of practice and automation.&lt;/p&gt;

&lt;p&gt;Of course there are way more advanced setups than this like multi-host deployment, proper service discovery and other things like this. But if you need such advanced features, it’s propably best to look in the direction of full-blown PaaS services like &lt;a href=&quot;http://deis.io/&quot;&gt;Deis&lt;/a&gt; or &lt;a href=&quot;https://flynn.io/&quot;&gt;Flynn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that I have this setup, I’m taking a break for at least half a year from this nifty subject of devops and do actual work: Design, CSS, Neos…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Due credit&lt;/strong&gt;: most of my Docker knowledge come from styding Docker images by &lt;a href=&quot;https://github.com/ryzy&quot;&gt;Marcin Ryzycki&lt;/a&gt; and asking him a lot of silly questions :)&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Mar 2015 23:23:32 +0300</pubDate>
        <link>http://dimaip.tumblr.com/2015/03/03/hybrid-deploy-with-docker-and-surf/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2015/03/03/hybrid-deploy-with-docker-and-surf/</guid>
        
        <category>docker</category>
        
        <category>deploy</category>
        
        <category>surf</category>
        
        <category>neos</category>
        
        
      </item>
    
      <item>
        <title>My technology radar for 2014/2015</title>
        <description>&lt;p&gt;I’ve just read an awesome article by ThoughtWorks on &lt;a href=&quot;http://www.thoughtworks.com/insights/blog/build-your-own-technology-radar&quot;&gt;building personal technology radar&lt;/a&gt;, and decided to sketch out my own list.&lt;/p&gt;

&lt;p&gt;In 2014 I had to learn more new things then I did during the previous 9 years of my web development career. Here is the list of keywords that mark a passing year for me and a few expectations for the next year.&lt;/p&gt;

&lt;h2 id=&quot;q1-2014&quot;&gt;Q1 2014&lt;/h2&gt;
&lt;p&gt;Typography, usability and design in general.&lt;/p&gt;

&lt;h2 id=&quot;q2-2014&quot;&gt;Q2 2014&lt;/h2&gt;

&lt;p&gt;Rethinking frontend development:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mobile first&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;Atomic design&lt;/a&gt;, &lt;a href=&quot;http://bem.info/&quot;&gt;BEM&lt;/a&gt;, &lt;a href=&quot;https://github.com/stubbornella/oocss/wiki&quot;&gt;OOCSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://alistapart.com/article/creating-style-guides&quot;&gt;Living styleguides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thoughtworks.github.io/p2/issue02/continuous-design/&quot;&gt;NoPSD&lt;/a&gt;, Designing in browser, together with designer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q3-2014&quot;&gt;Q3 2014&lt;/h2&gt;

&lt;p&gt;Began learning &lt;a href=&quot;http://neos.typo3.org/&quot;&gt;TYPO3 Neos&lt;/a&gt; and all that follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Flow&lt;/li&gt;
  &lt;li&gt;Neos&lt;/li&gt;
  &lt;li&gt;TypoScript2&lt;/li&gt;
  &lt;li&gt;TYPO3CR&lt;/li&gt;
  &lt;li&gt;Eel, FlowQuery, Fizzle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;q4-2014&quot;&gt;Q4 2014&lt;/h2&gt;

&lt;p&gt;Joined the Neos team for &lt;a href=&quot;http://dimaip.github.io/2014/10/05/the-code-sprint/&quot;&gt;code sprint in Denmark&lt;/a&gt;. Learned more in a week then during the whole previous year.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Switched to Linux and started developing locally&lt;/li&gt;
  &lt;li&gt;New PHP skills: Test Driven Development, coding guidelines, etc.&lt;/li&gt;
  &lt;li&gt;Advanced Git stuff&lt;/li&gt;
  &lt;li&gt;Composer&lt;/li&gt;
  &lt;li&gt;Bower&lt;/li&gt;
  &lt;li&gt;Grunt&lt;/li&gt;
  &lt;li&gt;Docker for local development (ditched Vagrant altogether)&lt;/li&gt;
  &lt;li&gt;Surf deployment&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dimaip.github.io/2014/12/20/three-steps-to-deploy/&quot;&gt;Contineos delivery with CircleCI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Finally… Learned to touch-type in English!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;2015&lt;/h2&gt;

&lt;p&gt;And here are things I want to learn in 2015:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do &lt;a href=&quot;https://github.com/ttreeagency/Ttree.Ress&quot;&gt;RESS with Neos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://github.com/Flowpack/Flowpack.ElasticSearch.ContentRepositoryAdaptor&quot;&gt;ElasticSearch with Neos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thenewstack.io/docker-is-driving-a-new-breed-of-paas/&quot;&gt;PaaS with Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Testable frontend: CSS critic + PhantomJS + BeHat&lt;/li&gt;
  &lt;li&gt;Work more Agile, but more organized&lt;/li&gt;
  &lt;li&gt;Learn more about Google Analitics &amp;amp; A/B testing and data-driven development in general&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But all of this technology matter only when you put users first, and build websites worth reading. I hope all of this technology put together will help us build great websites for great people, that’s &lt;a href=&quot;http://dimaip.github.io/2014/12/06/sfiru-goes-live/&quot;&gt;what we work so hard for&lt;/a&gt;, after all…&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Dec 2014 00:00:00 +0300</pubDate>
        <link>http://dimaip.tumblr.com/2014/12/30/tech-radar/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/12/30/tech-radar/</guid>
        
        <category>typo3</category>
        
        <category>neos</category>
        
        
      </item>
    
      <item>
        <title>3 Steps to Deploy Things Right (Neos+Surf+CircleCI)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/surf.jpg&quot; alt=&quot;'Surf'&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Creating websites nowadays has become such a complicated matter, that it often takes an army of developers and a huge array of tools to tackle a professional web project. It is so stressful to hear of yet another new tool that you have to learn not to fall behind. Technologies come and go, frustration accumulates.&lt;/p&gt;

&lt;p&gt;One of such topics I was afraid to touch was deployment. Sftp-ing to the server and editing things live from there seemed often the quickest way to fix something on a live project. But literally over a course of few months I’ve grasped some ideas I don’t know how I lived without. Here I want to share with you my deployment journey, step by step.&lt;/p&gt;

&lt;p&gt;This tutorial will give you an overview of 3 key components of deploying TYPO3 Flow/Neos applications: code repository (Github) + deployment toolbox (Surf) + continuous delivery tool (CircleCI). We use hosted solutions here instead of things like Jenkins and GitLab because they are much easier to setup for beginners while still being free for open source projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some Git and Github knowledge&lt;/li&gt;
  &lt;li&gt;Basic Composer understanding&lt;/li&gt;
  &lt;li&gt;SSH access to deployment server and Linux/MacOS development PC&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-1-put-code-into-git-repositories-and-compile-it-with-composer&quot;&gt;Step 1: Put code into git repositories and compile it with Composer&lt;/h3&gt;

&lt;p&gt;The first natural step after I started using TYPO3 Neos to build websites was to put all of my packages into git code repositories and pull them together via Composer PHP package manager. That’s how Neos itself works.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Upload your site package and other custom packages to Github repository (private or public).&lt;/li&gt;
  &lt;li&gt;Clone &lt;a href=&quot;https://git.typo3.org/Neos/Distributions/Base.git&quot;&gt;base Neos distribution&lt;/a&gt; and create your own distribution on top of it: add your Github repositories to repository list of composer.json file, and then require your packages. &lt;a href=&quot;https://github.com/sfi-ru/SfiDistr/blob/master/composer.json&quot;&gt;Example&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Add your customized Neos distribution as a separate repository in Github. &lt;a href=&quot;https://github.com/sfi-ru/SfiDistr&quot;&gt;Here is mine.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Workflow:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the code in one of your repositories.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;composer update&lt;/code&gt; locally, make sure things work, commit your new composer.lock file.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;composer install&lt;/code&gt; on production server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Advantages to how you worked before:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All of your code now is safe and easily accessible in Github repositories&lt;/li&gt;
  &lt;li&gt;Clear and conscious way to manage and assemble dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-2-deploy-code-with-typo3-surf&quot;&gt;Step 2: Deploy code with TYPO3 Surf&lt;/h3&gt;

&lt;p&gt;The previous step has got us far, now lets add some durability to our deployment solution.&lt;/p&gt;

&lt;p&gt;Let’s install and configure &lt;a href=&quot;http://typo3.org/additional-products/surf/&quot;&gt;Surf&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Require &lt;code&gt;typo3/surf&lt;/code&gt; in your composer.json. Run composer update.&lt;/li&gt;
  &lt;li&gt;Create a deployment configuration file similar to &lt;a href=&quot;https://github.com/sfi-ru/SfiDistr/blob/master/Build/Surf/Sfi.php&quot;&gt;this one&lt;/a&gt;. Make sure you can make a password-less login to your server &lt;a href=&quot;http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id/&quot;&gt;via public key&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;./flow surf:deploy DeploymentName&lt;/code&gt; to run a deployment. On first run it would fail as it does not know how to connect to your database yet.&lt;/li&gt;
  &lt;li&gt;Add Settings.yaml with your DB config on your deployment server to &lt;code&gt;/path-to-surf/shared/Configuration/Production/Settings.yaml&lt;/code&gt;. Symlink your webroot to &lt;code&gt;releases/current&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Optionally configure smoke tests (see Surf docs).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Workflow:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the code in your repositories. Commit and push the changes to your packages.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;composer update&lt;/code&gt; locally, make sure things work, commit and push your new composer.lock file.&lt;/li&gt;
  &lt;li&gt;Run Surf manually from command line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Advantages over previous step:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easy to roll-back to previous versions of deployment.&lt;/li&gt;
  &lt;li&gt;Automatic smoke-test before going live.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-3-continuous-delivery-with-circleci&quot;&gt;Step 3: Continuous delivery with CircleCI&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/circleci.png&quot; alt=&quot;'CircleCI'&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it’s a pleasure to see how Surf automatically deploys our Composer-based project, but we would like Surf to do it on every new commit to master branch of our repository. That’s easy to do with CircleCI:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Register on &lt;a href=&quot;http://circleci.com&quot;&gt;circleci.com&lt;/a&gt; and create new project based on your project’s Github repository.&lt;/li&gt;
  &lt;li&gt;Add a &lt;a href=&quot;https://github.com/sfi-ru/SfiDistr/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt; file to the root of your project distribution, that describes deployment process.&lt;/li&gt;
  &lt;li&gt;Add your ssh key to CircleCI&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we got all we had on step two, but ran automatically on every code commit to master branch of your project repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workflow:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Edit the code in your repositories. Commit and push the changes to your packages.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;composer update&lt;/code&gt; locally, make sure things work, commit and push your new composer.lock file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Advantages over previous step:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deployment is triggered automatically on every commit to Github&lt;/li&gt;
  &lt;li&gt;You can do some more advanced tests in CircleCI, in addition to smoke tests done by Surf&lt;/li&gt;
  &lt;li&gt;Configure more advanced workflows with multiple stages and nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;where-to-go-next&quot;&gt;Where to go next&lt;/h3&gt;

&lt;p&gt;Of course what we have achieved is not rocket science and there are many ways to improve this setup. First of all you might like to add more stages to your project, like a staging environment. You might want to employ more advanced testing techniques to make sure you site really works the way it should before going live. Behavioural tests (Behat) come to my mind first, but I’m really open to other ideas on how to test Neos websites.&lt;/p&gt;

&lt;p&gt;And finally there is a whole new world of &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, but that is already a different story.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks go to &lt;a href=&quot;https://twitter.com/stolle_&quot;&gt;Johannes Steu&lt;/a&gt; for teaching me 95% of things I write about here.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Dec 2014 00:00:00 +0300</pubDate>
        <link>http://dimaip.tumblr.com/2014/12/20/three-steps-to-deploy/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/12/20/three-steps-to-deploy/</guid>
        
        <category>typo3</category>
        
        <category>neos</category>
        
        
      </item>
    
      <item>
        <title>SFI.ru goes live with Neos</title>
        <description>&lt;p&gt;So yeah, we have just launched a Neos project we have been working on for almost half a year – the &lt;a href=&quot;http://sfi.ru&quot;&gt;website of St Philaret`s Christian Orthodox Institute&lt;/a&gt;. I want to share with you the experience I have gained during this time, both technical and humanitarian.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sfi.png&quot; alt=&quot;sfi.ru website&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-team&quot;&gt;The team&lt;/h3&gt;

&lt;p&gt;But first, allow me to introduce to you our small team:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/alexandra.strotceva&quot;&gt;Alexandra&lt;/a&gt; – a true monumental painting artist and our designer, copywriter and content strategist.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/sonya.androsenko&quot;&gt;Sofia&lt;/a&gt; – talented journalist, news writer, translator and just really smart person.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/profile.php?id=100002126400211&quot;&gt;Natalia&lt;/a&gt; – the Boss! Soon to become a PhD in Church History, one to ask about all sorts of scientific research questions, expert in Russian educational laws and an awesome person too!&lt;/li&gt;
  &lt;li&gt;And &lt;a href=&quot;https://www.facebook.com/dimaip&quot;&gt;me&lt;/a&gt; – mediocre frontender with love for all things beautiful, including Neos, since this summer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/str.jpg&quot; alt=&quot;'Alexandra'&quot; /&gt;
&lt;img src=&quot;/assets/sofia.jpg&quot; alt=&quot;'Sofia'&quot; /&gt;
&lt;img src=&quot;/assets/nign.jpg&quot; alt=&quot;'Natalia'&quot; /&gt;
&lt;img src=&quot;/assets/me.jpg&quot; alt=&quot;'Dmitri'&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-institute&quot;&gt;The Institute&lt;/h3&gt;

&lt;p&gt;We together are proud to be an information services team behind truly unique education center – St’ Philat’s Christian Institute. It is the first free theological Institute in Russia, which neither belongs to the state nor to the official structures of the church, which allows it to be a centre of dialog between church and society.
I not only happen to work here, but also study, which helps me to overcome technological bias and adds some humanities to my narrow rationalistic mind :-)&lt;/p&gt;

&lt;p&gt;So for all of us, me included, working on this project meant way more than a financial interest or a mere hobby. It was a strong passion backed up by moral reason, that our work promotes something that is so needed in crippled Russian society: the spirit of openness and dialog, social change and consolidation, in the view of Christ and His Church.&lt;/p&gt;

&lt;h3 id=&quot;the-goal&quot;&gt;The goal&lt;/h3&gt;

&lt;p&gt;The objectives of the website redesign were clear:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Represent loads of legal and educational information in a clear way without frightening the user.&lt;/li&gt;
  &lt;li&gt;Tell our story in simple words, that not only scientists or clergy would be able to understand.&lt;/li&gt;
  &lt;li&gt;Show the life of the Institute with the eyes of a student, try to bring in some of the spirit, that dwells a midst the walls of the Institute.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-we-worked&quot;&gt;How we worked&lt;/h3&gt;

&lt;h4 id=&quot;mobile-first&quot;&gt;Mobile first&lt;/h4&gt;
&lt;p&gt;There were a few things different about this project from any other project I had been a part of.
The first thing is that it was truly mobile-first. We did not have a desktop version 3 weeks before the release… And now I really understand what is at heart of mobile-first: constraints help you achieve simplicity, and once you have it for mobile you do not want to give it up for desktop. I dare say even if you don’t have any mobile visitors, start with mobile, just for the sake of your desktop version to stay clear.&lt;/p&gt;

&lt;h4 id=&quot;we-design-a-system-of-components-not-pages&quot;&gt;We design a system of components, not pages&lt;/h4&gt;
&lt;p&gt;And yes, that’s where Neos with its node repository really shines. We have built a styleguide with Neos, way before we had actual site itself. Through the styleguide we could track status of development of components, test both frontend and server-side parts and so on. Once I give it some polish I will publish it.
We had a long way with components, reducing the number of components into a solid system used throughout the site.
The main trick, as always, is with naming. I got a simple rule: do not invent semantics where there aren’t any. If the role of a block is solely presentational, do name it ‘Text with Image’ and do not worry about it. However when there are domain-level semantics do not hesitate to highlight it in your code!&lt;/p&gt;

&lt;h4 id=&quot;designer-to-developer-collaboration&quot;&gt;Designer-to-developer collaboration&lt;/h4&gt;
&lt;p&gt;We shared responsibility for making many design decisions together. Design is not veneer, not what things look like, but it is how things work. I spent a lot of time reading some books on visual design and typography, while spending a lot of time explaining to Alexandra how certain technology actually works and giving a few HTML/CSS lessons.
Working in the same office is invaluable and I doubt I would ever agree to work on remote projects again.&lt;/p&gt;

&lt;h3 id=&quot;gratitude&quot;&gt;Gratitude&lt;/h3&gt;
&lt;p&gt;During these months I felt a real support from the Neos community, without which I might have given up quite early. The spirit of free sharing and humility among the core devs has really given me some breathing space and inspiration.
Our boss also got inspired by my stories of Neos community, and has given me permission to &lt;a href=&quot;https://github.com/sfi-ru/Sfi.Sfi&quot;&gt;publish all of the code we create here at SFI as open source&lt;/a&gt;. I hope that complete practical examples of our production code would help some of you learn a few new tricks and solutions. Hope this would be a small way to pay back for all of the help I received from you guys (in addition to some of the issues I could fix in Neos while working at this project).&lt;/p&gt;

&lt;h3 id=&quot;this-is-only-the-beginning&quot;&gt;This is only the beginning…&lt;/h3&gt;

&lt;p&gt;Yes, there are still bugs, quirks, and a whole lot of stuff not done. Yes, some things could have been done more professionally and in some areas our team is lacking expertise and experience. But I do feel confident about one thing: our site will succeed in its mission, because we dedicated a lot of love, care and thought to it, which we hope to continue to do towards all work God allows us to do here on Earth.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Dec 2014 00:00:00 +0300</pubDate>
        <link>http://dimaip.tumblr.com/2014/12/06/sfiru-goes-live/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/12/06/sfiru-goes-live/</guid>
        
        <category>typo3</category>
        
        <category>neos</category>
        
        
      </item>
    
      <item>
        <title>The TypoScript Manifesto</title>
        <description>&lt;h2 id=&quot;love-thy-typoscript-code&quot;&gt;Love thy TypoScript code&lt;/h2&gt;

&lt;p&gt;TypoScript2 is an amazing language, that suits TYPO3Neos and TYPO3CR perfectly. If you do not like it, get to meet it better, you will.&lt;/p&gt;

&lt;p&gt;Think about TypoScript as a sort of &lt;a href=&quot;http://dimaip.github.io/2014/08/13/typo3-neos-is-so-mvc/&quot;&gt;Controller layer, between TYPO3CR(Model) and Fluid(View)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;keep-templates-as-lean-and-logic-less-as-possible&quot;&gt;Keep templates as lean and logic-less as possible&lt;/h2&gt;

&lt;p&gt;Every time you have to iterate over objects in a Fluid template think twice: maybe the collection of things you iterate over would benefit from having a custom TypoScript renderer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dimaip/Sfi.Erm/blob/master/Resources/Private/Templates/NodeTypes/DoctorsList.html&quot;&gt;Look ma, no loops!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;keep-your-code-domain-centric&quot;&gt;Keep your code domain-centric&lt;/h2&gt;

&lt;p&gt;Remember the times of extending EXT:News to render your custom content? Never again!
Don’t resist a pleasure of having your model stay as close to your domain language as possible. (Just do not bring the domain laguage with you to CSS class names! Read about OOCSS/Atomic design first.)&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Nov 2014 00:00:00 +0300</pubDate>
        <link>http://dimaip.tumblr.com/2014/11/05/the-typoscript-manifesto/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/11/05/the-typoscript-manifesto/</guid>
        
        <category>typo3</category>
        
        <category>neos</category>
        
        <category>typoscript</category>
        
        
      </item>
    
      <item>
        <title>What I have learned at TYPO3 Neos code sprint in Denmark</title>
        <description>&lt;p&gt;After a six hour walk around Copenhagen, one of the best cities on earth, I have a few hours before the flight to stop and think what this week meant for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/castle.jpg&quot; alt=&quot;&amp;quot;Our&amp;quot; castle&quot; /&gt;
&lt;br /&gt;&lt;em&gt;“Our” castle&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;where-ive-been-to-last-week&quot;&gt;Where I’ve been to last week&lt;/h2&gt;

&lt;p&gt;It is not so simple to explain. It was not a vacation. But I would not call it work either… It was not a conference, nor was it a tutition or a school.
Bunch of people, literally from all over the world, come together to share a common passion: building a content management system (CMS) that does not suck. We call it a code sprint.
None of us was paid for participation, we did it from pure passion. But none of us had to pay either, thanks to our amazing sponsors!&lt;/p&gt;

&lt;p&gt;To summarize: bunch of geeks living in a XVth century castle, building best CMS on earth – &lt;a href=&quot;http://neos.typo3.org&quot;&gt;TYPO3 Neos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kickoff.jpg&quot; alt=&quot;A kickoff meeting to start the sprint&quot; /&gt;
&lt;br /&gt;&lt;em&gt;A kickoff meeting to start the sprint&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-i-have-learnt&quot;&gt;What I have learnt&lt;/h2&gt;

&lt;p&gt;Going to the sprint I knew I would probably learn a few things… You see, I’m at peers with computers since ‘95, since ‘05 doing professional web development, so I had hoped that I would have learnt a few things by then. But compared with the guys that were at the sprint, my knowledge in all areas was an absolute zero. And that is such a cool and humbling experience!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/core.jpg&quot; alt=&quot;Some of the lead developers in action&quot; /&gt;
&lt;br /&gt;&lt;em&gt;Some of the lead developers in action&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I had never been learning so intensively in my whole life. Ever.
It felt like all of the participants were jumping on top of my poor head, trying to shove into it as many things as possible.&lt;/p&gt;

&lt;p&gt;As a result:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I got an overview of the core of TYPO3 Neos;&lt;/li&gt;
  &lt;li&gt;learned to set up Vagrant boxes;&lt;/li&gt;
  &lt;li&gt;learned quite a bit about JavaScript, Ember in particular;&lt;/li&gt;
  &lt;li&gt;learned to write unit and functional tests;&lt;/li&gt;
  &lt;li&gt;learned working with JIRA and Gerrit code reviews;&lt;/li&gt;
  &lt;li&gt;improved my Git skills;&lt;/li&gt;
  &lt;li&gt;got to feel what working agile is like;&lt;/li&gt;
  &lt;li&gt;got a few insights on how RESTful services should work;&lt;/li&gt;
  &lt;li&gt;and even began using VIM mode in SublimeText… Geekish!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dine.jpg&quot; alt=&quot;Dining with style...&quot; /&gt;
&lt;br /&gt;&lt;em&gt;Dining with style…&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-was-done&quot;&gt;What was done&lt;/h2&gt;

&lt;p&gt;But, of course, the sprint is not a programming school, and we came together to contribute, not just to learn.&lt;/p&gt;

&lt;p&gt;It’s really hard to imagine what amount of work 30 passionate developers can pull off during one week! ACL, backend translation, content dimensions, countless bugfixes, finalizing a release of Neos version 1.2 is just a very shallow overview.&lt;/p&gt;

&lt;p&gt;I joined a team that focused on improving editor experience. Fixing bugs, improving error detection and notification: all of those things that could get you frustrated with Neos pretty quickly!
Also I managed to add a few features like TypoScript inclussion globbing, TypoScript image object and a few other improvements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/workplace.jpg&quot; alt=&quot;My typical workplace&quot; /&gt;
&lt;br /&gt;&lt;em&gt;My typical workplace&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;wraping-up&quot;&gt;Wraping up&lt;/h2&gt;

&lt;p&gt;Contributing to Open Source projects is a win-win solution for both agencies and freelancers alike. You get the tool that really fits your needs like a glove, that you learn throughout and can fix yourself, in case things go wrong. But also you contribute to something bigger than yourself and your bussiness interests, something that adds real value to life of editors and developers throughout the world. This is the spirit Kasper Skaarhoj has put into our community from the start, and I really care we will be able to keep it breathing among us.&lt;/p&gt;

&lt;h2 id=&quot;a-few-personal-things&quot;&gt;A few personal things&lt;/h2&gt;

&lt;p&gt;Cooking and cleaning up together, conversasions during long walks, morning runs: everything was so natural and welcoming, that I could barelly remember that it was my first event in TYPO3 community. I’m especially grateful to Aske Ertmann, who took all of the bitter organizational tasks for himself. No doubt 1.2 will be a very solid release, with such a release manager!&lt;/p&gt;

&lt;p&gt;And one more thing. It is so enjoyable that my contribution to the NEOS project is possible as part of my work time at our amazing &lt;a href=&quot;http://sfi.ru/eng/&quot;&gt;St Philaret’s Christian Institute&lt;/a&gt;. Now we finally have a chance for cool new website made with Neos :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/surroundings.jpg&quot; alt=&quot;One of the daily walks. Checking out the surroundings&quot; /&gt;
&lt;br /&gt;&lt;em&gt;One of the daily walks. Checking out the surroundings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/visay.jpg&quot; alt=&quot;My amazing room mate, Visay from Cambodia(!)&quot; /&gt;
&lt;br /&gt;&lt;em&gt;My amazing room mate, Visay from Cambodia(!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/photos/111842839438389408798/albums/6064058344696631249&quot;&gt;View all of photos from the event&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Oct 2014 00:00:00 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/10/05/the-code-sprint/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/10/05/the-code-sprint/</guid>
        
        <category>typo3</category>
        
        <category>neos</category>
        
        <category>codesprint</category>
        
        
      </item>
    
      <item>
        <title>Mounting remote partition over SSHFS in Linux</title>
        <description>&lt;p&gt;I’ve maderss a switch to linux in flavour of Elementary OS. My web development setup is super simple: 
Chromium + Sublime Text 3 + partition mounted from our dev server over SSHFS.&lt;/p&gt;

&lt;p&gt;This post is more of a note to self on how to mount remote partitions.&lt;/p&gt;

&lt;h2 id=&quot;logging-onto-remote-server-via-ssh-keys&quot;&gt;1. Logging onto remote server via ssh keys&lt;/h2&gt;

&lt;p&gt;We will need to be able to login to remote server via ssh keys and not by password.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#generate keys&lt;/span&gt;
ssh-keygen &lt;span class=&quot;c&quot;&gt;# and hit enter at all prompts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#copy keys to remote server&lt;/span&gt;
ssh-copy-id USERNAME@SERVERADDRRESS
&lt;span class=&quot;c&quot;&gt;#try logging in&lt;/span&gt;
ssh USERNAME@SERVERADDRRESS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you wasn’t prompted for password and made a login successfully you are done with this.&lt;/p&gt;

&lt;h2 id=&quot;permanently-mount-remote-partiation-in-fstab&quot;&gt;2. Permanently mount remote partiation in fstab&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#edit your fstab file&lt;/span&gt;
sudo vi /etc/fstab&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And add this line to the end of fstab file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sshfs#USERNAME@SERVERADDRRESS:/path /media/your_mount    fuse      user,_netdev,reconnect,uid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000,gid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000,follow_symlinks,identityfile&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/USERNAME/.ssh/id_rsa,idmap&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;user,allow_other  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;   0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Install sshfs, if not already installed&lt;/span&gt;
sudo apt-get install sshfs
&lt;span class=&quot;c&quot;&gt;#make dir for mount point&lt;/span&gt;
sudo mkdir /media/your_mount
&lt;span class=&quot;c&quot;&gt;#Mount all partitions according to fstab file&lt;/span&gt;
sudo mount -a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result you get your remote file system mounted under &lt;code&gt;/media/your_mount&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/09/24/mounting-remote-sshfs/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/09/24/mounting-remote-sshfs/</guid>
        
        <category>sshfs</category>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>Migrating content from TYPO3 to TYPO3 Neos</title>
        <description>&lt;p&gt;Unless you are starting with a fresh project, one of the first things you need to get done when starting with Neos is to migrate content from old TYPO3 installation.&lt;/p&gt;

&lt;p&gt;To my surprise, I found almost zero information on this subject. There are &lt;a href=&quot;https://speakerdeck.com/kdambekalns/migrating-from-typo3-cms-to-typo3-neos&quot;&gt;great slides&lt;/a&gt; available by Karsten, but his awesome plugin is not ready yet, so I was stuck in the middle of nowhere with zero knowledge about the new system.&lt;/p&gt;

&lt;p&gt;I hope this post will save you at least from part of frustration that I had gone through.&lt;/p&gt;

&lt;p&gt;I needed to migrate only tt_news records, but you can easily adapt it to anything you need just grasp the methode.&lt;/p&gt;

&lt;h2 id=&quot;command-controller&quot;&gt;1. Command Controller&lt;/h2&gt;

&lt;p&gt;The first question I had was where to put my migration code. Most apropriate is to create a command line task for that. Luckily Neos provides an easy way of creating command controllers. Here is &lt;a href=&quot;http://www.matthias-witte.net/create-your-own-typo3-flow-command-line-controller/2012/11/&quot;&gt;a good tutorial on how to create one&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;get-records-from-old-typo3&quot;&gt;2. Get records from old TYPO3&lt;/h2&gt;

&lt;p&gt;Next I copied all of the relevant tables from old database to the new one.
I needed a few minutes to figure out how to deal with direct database connections, but it wasn’t hard. This is a function that retrieves all records of certain tt_news category, but you can use any query you want here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;private function getNewsByCat($cat){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$connection = $this-&amp;gt;entityManager-&amp;gt;getConnection();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$sql = &amp;#39;SELECT tt_news.* FROM tt_news&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;INNER JOIN tt_news_cat_mm mm on tt_news.uid = mm.uid_local &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;WHERE mm.uid_foreign = &amp;#39;.$cat.&amp;quot; AND tt_news.deleted=0 AND tt_news.hidden=0&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$statement = $connection-&amp;gt;prepare($sql);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$statement-&amp;gt;execute();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	return $statement-&amp;gt;fetchAll(\PDO::FETCH_ASSOC);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;node-template&quot;&gt;3. Node template&lt;/h2&gt;

&lt;p&gt;I had defined my own node type: Sfi.Sfi:News to hold news records. Now to actually insert anything to TYPO3CR, you need to create a NodeTemplate object for every news record, and fill it in with relevant properties.&lt;/p&gt;

&lt;p&gt;The simple properties were easy to nail:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;context = $this-&amp;gt;contextFactory-&amp;gt;create(array(&amp;#39;workspaceName&amp;#39; =&amp;gt; &amp;#39;live&amp;#39;));&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;//This is where the news records would go&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$infoCollectionNode = $this-&amp;gt;context-&amp;gt;getNode(&amp;#39;/sites/sfi/news/info&amp;#39;);&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt; $news = $this-&amp;gt;getNewsByCat(1);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        foreach ($news as $newsItem) {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	$nodeTemplate = new \TYPO3\TYPO3CR\Domain\Model\NodeTemplate();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	$nodeTemplate-&amp;gt;setNodeType($this-&amp;gt;nodeTypeManager-&amp;gt;getNodeType(&amp;#39;Sfi.News:News&amp;#39;));&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	$nodeTemplate-&amp;gt;setProperty(&amp;#39;title&amp;#39;,$newsItem[&amp;#39;title&amp;#39;]);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	$nodeTemplate-&amp;gt;setProperty(&amp;#39;teaser&amp;#39;,$newsItem[&amp;#39;short&amp;#39;]);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	if($newsItem[&amp;#39;datetime&amp;#39;]){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        		$date = new \DateTime();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        		$date-&amp;gt;setTimestamp($newsItem[&amp;#39;datetime&amp;#39;]);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        		$nodeTemplate-&amp;gt;setProperty(&amp;#39;date&amp;#39;,$date);        		&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	}&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	$nodeTemplate-&amp;gt;setProperty(&amp;#39;date&amp;#39;,$date);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	$nodeTemplate-&amp;gt;setProperty(&amp;#39;authorName&amp;#39;,$newsItem[&amp;#39;author&amp;#39;]);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	//And finally creare the new node&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        	$newsNode = $infoCollectionNode-&amp;gt;createNodeFromTemplate($nodeTemplate);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;bodytext&quot;&gt;Bodytext&lt;/h3&gt;

&lt;p&gt;I wanted my new News object to be really flexible in the future, so I decided to store bodytext in the mainContent child node.&lt;/p&gt;

&lt;p&gt;TODO: I’ll need to parse bodytext for TYPO3 specific things like &lt;link /&gt; tag.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;if($newsItem[&amp;#39;bodytext&amp;#39;]){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$mainContentNode = $newsNode-&amp;gt;getNode(&amp;#39;main&amp;#39;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$bodytextTemplate = new \TYPO3\TYPO3CR\Domain\Model\NodeTemplate();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$bodytextTemplate-&amp;gt;setNodeType($this-&amp;gt;nodeTypeManager-&amp;gt;getNodeType(&amp;#39;TYPO3.Neos.NodeTypes:Text&amp;#39;));&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$bodytextTemplate-&amp;gt;setProperty(&amp;#39;text&amp;#39;,$newsItem[&amp;#39;bodytext&amp;#39;]);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$mainContentNode-&amp;gt;createNodeFromTemplate($bodytextTemplate);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;image&quot;&gt;Image&lt;/h3&gt;

&lt;p&gt;With images I had to spend even more time.&lt;/p&gt;

&lt;p&gt;Here’s the code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;if($newsItem[&amp;#39;image&amp;#39;]){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$assetsNode = $newsNode-&amp;gt;getNode(&amp;#39;assets&amp;#39;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$captions = explode(&amp;#39;,&amp;#39;,$newsItem[&amp;#39;imagealttext&amp;#39;]);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	foreach(explode(&amp;#39;,&amp;#39;,$newsItem[&amp;#39;image&amp;#39;]) as $i =&amp;gt; $img_file){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;		$image = $this-&amp;gt;importImage(&amp;#39;*****/web/uploads/pics/&amp;#39;.$img_file);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;		$imageTemplate = new \TYPO3\TYPO3CR\Domain\Model\NodeTemplate();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    	$imageTemplate-&amp;gt;setNodeType($this-&amp;gt;nodeTypeManager-&amp;gt;getNodeType(&amp;#39;TYPO3.Neos.NodeTypes:Image&amp;#39;));&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    	$imageTemplate-&amp;gt;setProperty(&amp;#39;image&amp;#39;,$image);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    	if(isset($captions[$i]))&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    		$imageTemplate-&amp;gt;setProperty(&amp;#39;alternativeText&amp;#39;,$captions[$i]);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    	$assetsNode-&amp;gt;createNodeFromTemplate($imageTemplate);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	}&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this is how to create an image:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;private function importImage($filename){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$resource = $this-&amp;gt;resourceManager-&amp;gt;importResource($filename);&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;	$image = new Image($resource);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$this-&amp;gt;imageRepository-&amp;gt;add($image);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$processingInstructions = Array();&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;	return $this-&amp;gt;objectManager-&amp;gt;get(&amp;#39;TYPO3\Media\Domain\Model\ImageVariant&amp;#39;, $image, $processingInstructions);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;And finally, migrating files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;if($newsItem[&amp;#39;news_files&amp;#39;]){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	foreach(explode(&amp;#39;,&amp;#39;,$newsItem[&amp;#39;news_files&amp;#39;]) as $i =&amp;gt; $file_name){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;		$asset = $this-&amp;gt;importFile(&amp;#39;****/web/uploads/media/&amp;#39;.$file_name);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;		if($asset){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;			$assets[] = $asset;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;		}&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	}&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$fileTemplate = new \TYPO3\TYPO3CR\Domain\Model\NodeTemplate();&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$fileTemplate-&amp;gt;setNodeType($this-&amp;gt;nodeTypeManager-&amp;gt;getNodeType(&amp;#39;TYPO3.Neos.NodeTypes:AssetList&amp;#39;));&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$fileTemplate-&amp;gt;setProperty(&amp;#39;assets&amp;#39;,$assets);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$assetsNode-&amp;gt;createNodeFromTemplate($fileTemplate);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And a relevant file creation function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;private function importFile($filename){&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$resource = $this-&amp;gt;resourceManager-&amp;gt;importResource($filename);&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;	$asset = new Asset($resource);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$this-&amp;gt;assetRepository-&amp;gt;add($asset);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	return $asset;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;Here you can see the final code: &lt;a href=&quot;https://gist.github.com/dimaip/43d027f184e06f1cd37c&quot;&gt;the gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a very low-quality code, just to show you the idea and basic methods, until proper migration package is released by Karsten.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And what is your experience with migrating content from old TYPO3? Share!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Aug 2014 00:00:00 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/08/14/content-migration-to-neos/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/08/14/content-migration-to-neos/</guid>
        
        <category>Typo3</category>
        
        <category>Neos</category>
        
        
      </item>
    
      <item>
        <title>TYPO3 Neos is so MVC: bridging the gap between two worlds</title>
        <description>&lt;p&gt;This year I took a deep dive into the world of frontend. To my surprise it’s not so much about “pixel-perfect” spaghetti CSS code whirled over HTML, page by page. Nowadays frontend has architecture, it has deep thought behind it. The other thing that surprised me is that not many of server-side guys seem to care about it, they think they have a separate, much more sophisticated realm of its own. Heck, even designers have become closer to understanding frontend, than the server-side people. This article will be an attempt to look at the most advanced server-side CMS with the eyes of frontend architect and MVC-lover.&lt;/p&gt;

&lt;h2 id=&quot;starting-point&quot;&gt;Starting point&lt;/h2&gt;

&lt;p&gt;My frontend code is modular and very well organised with the &lt;a href=&quot;http://bradfrostweb.com/blog/post/atomic-web-design/&quot;&gt;Atomic design methodology&lt;/a&gt;, a flavor of &lt;a href=&quot;https://github.com/stubbornella/oocss/wiki&quot;&gt;OOCSS&lt;/a&gt; and &lt;a href=&quot;https://smacss.com/&quot;&gt;SMACSS&lt;/a&gt;. Also I use &lt;a href=&quot;http://bem.info/&quot;&gt;BEM&lt;/a&gt; naming convention for classes. On top of that, &lt;a href=&quot;http://alistapart.com/article/creating-style-guides&quot;&gt;the living styleguide&lt;/a&gt; is generated to provide a collection of LEGO blocks for the whole design team. The CSS is lean and rational, you don’t find a &lt;a href=&quot;http://csswizardry.com/2012/11/code-smells-in-css/&quot;&gt;magic number&lt;/a&gt; in it often. Now I hear you say, what does it have to do with a CMS? – It has a lot to do with Neos!&lt;/p&gt;

&lt;h2 id=&quot;separation-of-content-and-presentation&quot;&gt;Separation of content and presentation&lt;/h2&gt;

&lt;p&gt;The idea of separation of content and presentation has emrged long ago for the world wide web. I grew up as web developer in &lt;a href=&quot;http://www.csszengarden.com/&quot;&gt;CSSZenGarden&lt;/a&gt; and have that idea in my guts. But this idea has a sibling in the world of classical software development – Model-View-Controller pattern. I find this pattern very well applicable to the process of website building.&lt;/p&gt;

&lt;p&gt;I have an idea to employ Neos to filling the gap between these two worlds, and ultimately saving the whole world wide web!&lt;/p&gt;

&lt;h2 id=&quot;mvc-vs-neos&quot;&gt;MVC vs. NEOS&lt;/h2&gt;

&lt;p&gt;I just recently got started digging into Neos, and at first I had a question: we have yaml, we have fluid, why TypoScript2?! The answer I gave to myself: to make it look like MVC. Here follows a brief explanation of this crazy idea.&lt;/p&gt;

&lt;h3 id=&quot;model&quot;&gt;Model&lt;/h3&gt;

&lt;p&gt;With model it’s pretty clear: TYPO3CR provides a very well structured way to store and edit your content. You can query it from TypoScript the way many storage solutions would be jealous. Clear, extendable, robust, sitting on top of industry-standard Doctrine. So far so good.&lt;/p&gt;

&lt;h3 id=&quot;view&quot;&gt;View&lt;/h3&gt;

&lt;p&gt;Rooted deeply in the frontend architecture philosophy, we have the view.&lt;/p&gt;

&lt;p&gt;Powerful FLUID templates are very easy to overdo and stuff in with all sorts of content specific logic. Ideally the view templates should be completely logic-less.&lt;/p&gt;

&lt;p&gt;That would allow creating encapsulated HTML+CSS+JS building blocks, which can be filled with data coming from any location. Imagine having a typical [media element], title+teaser+image, which can hold news articles, promo links to other pages and what not. In addition to that, the same news article can be rendered with different view modules, like Media, Media–Important and Media–Urgent.&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller&lt;/h3&gt;

&lt;p&gt;Now the question is how to connect these two realms in the right way.&lt;/p&gt;

&lt;p&gt;For Neos we have a magical heritage from the days of Kasper – TypoScript, now flexible as ever in its second version!&lt;/p&gt;

&lt;p&gt;In TS2 we can easily query our model, the TYPO3CR, traverse nodes, process properties in any ways we can think of. There are still some things missing, like the node linking feature, or media image rendering, but that will soon be added to TS. Finally, if you have something unique, you can create your own TS object with custom implementation class.&lt;/p&gt;

&lt;p&gt;Now the difference with real controller is that one controller may have actions classes, so single TS object may function more as analog of action, rather than controller. Multiple action TS objects may be joined to resemble something like a controller with the help of naming conventions or a parent prototype, that will hold relevant action objects together. TODO: think this through.&lt;/p&gt;

&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;

&lt;p&gt;And yes, we even have some sort of routing in the form of ‘root’ TS object, but there’s nothing that stops us from developing this concept even further. I leave it up to your imagination.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The front end and server-side people should communicate more! We have ideas to share, and here, at front end, we also have a passion for code, crisp architecture and beautiful design.&lt;/p&gt;

&lt;p&gt;This article was meant as a very rough analogy, which certainly has its limits. It’s more of an insight, a fresh look at how we look at our code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DOES IT MAKE ANY SENSE AT ALL?! I need your response!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Aug 2014 16:23:32 +0400</pubDate>
        <link>http://dimaip.tumblr.com/2014/08/13/typo3-neos-is-so-mvc/</link>
        <guid isPermaLink="true">http://dimaip.tumblr.com/2014/08/13/typo3-neos-is-so-mvc/</guid>
        
        <category>typo3</category>
        
        <category>neos</category>
        
        <category>mvc</category>
        
        
      </item>
    
  </channel>
</rss>
